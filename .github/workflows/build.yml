name: Build

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
  workflow_dispatch:
    branches:
      - main

  schedule:
    # At minute 0 past hour 1, 7, 13, and 19. (see https://crontab.guru)
    - cron: '00 01,07,13,19 * * *'

jobs:

  get_llvm_project_commit:
    name: Get latest LLVM commit
    runs-on: ubuntu-latest
    outputs:
      LLVM_PROJECT_COMMIT: ${{ steps.get_llvm_project_commit.outputs.LLVM_PROJECT_COMMIT }}
    steps:
      - name: Get llvm-project commit
        id: get_llvm_project_commit
        run: |
          sudo apt install jq
          LLVM_PROJECT_COMMIT=$(curl -s https://api.github.com/repos/llvm/llvm-project/commits/main | jq -r '.sha[:8]')
          echo "LLVM_PROJECT_COMMIT=${LLVM_PROJECT_COMMIT}" | tee -a $GITHUB_OUTPUT

  build:

    needs: get_llvm_project_commit

    name: Build distro of LLVM+MLIR
    runs-on: ${{ matrix.os }}
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, macos-latest ]
        arch: [ AArch64, X86 ]
        py_version: [ "3.11" ]
        exclude:
          - os: macos-latest
            arch: X86
    outputs:
      LLVM_PROJECT_COMMIT: ${{ needs.get_llvm_project_commit.outputs.LLVM_PROJECT_COMMIT }}

    steps:
      - name: Set up Python
        uses: actions/setup-python@13ae5bb136fac2878aff31522b9efb785519f984 # v4.3.0
        with:
          python-version: ${{ matrix.py_version }}

      - name: Checkout this repo
        uses: actions/checkout@v3

      - name: Checkout llvm-project
        uses: actions/checkout@v3
        with:
          repository: llvm/llvm-project
          ref: ${{ needs.get_latest_llvm_commit.outputs.LLVM_PROJECT_COMMIT }}
          path: sandbox

      - name: Compute llvm-project base path and output commit
        run: |
          echo "LLVM_PROJECT_MAIN_SRC_DIR=${GITHUB_WORKSPACE}/sandbox" | tee -a $GITHUB_ENV
          echo "LLVM_PROJECT_MAIN_BINARY_DIR=${GITHUB_WORKSPACE}/sandbox/build" | tee -a $GITHUB_ENV
          echo "LLVM_PROJECT_INSTALL_DIR=${GITHUB_WORKSPACE}/llvm_project_install" | tee -a $GITHUB_ENV
          echo "LLVM_PROJECT_HOST_MAIN_BINARY_DIR=${GITHUB_WORKSPACE}/sandbox/build_host" | tee -a $GITHUB_ENV
          echo "LLVM_PROJECT_COMMIT=${{ needs.get_llvm_project_commit.outputs.LLVM_PROJECT_COMMIT }}" | tee -a $GITHUB_ENV

      - name: Install Python depends
        run: |
          python -m pip install -r ${LLVM_PROJECT_MAIN_SRC_DIR}/mlir/python/requirements.txt

      - name: Install Ninja
        uses: llvm/actions/install-ninja@6a57890d0e3f9f35dfc72e7e48bc5e1e527cdd6c # Jan 17

      - name: Ccache for C++ compilation
        uses: hendrikmuhs/ccache-action@621a41397ed83711c72862638d9ff6e63fca3041 # v1.2.3
        with:
          key: ${{ matrix.os }}-${{ matrix.arch }}-llvm-project
          # LLVM needs serious cache size
          max-size: 6G

      - name: Install cross-compilation toolchain
        if: contains(matrix.os, 'ubuntu') && contains(matrix.arch, 'AArch64')
        run: |
          sudo apt-get update
          sudo apt-get install -y binutils-aarch64-linux-gnu \
            g++-aarch64-linux-gnu gcc-aarch64-linux-gnu

      - name: Build host llvmtblgen/mlirtblgen
        if: contains(matrix.os, 'ubuntu') && contains(matrix.arch, 'AArch64')
        run: |
          cmake \
            -DBUILD_SHARED_LIBS=OFF \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_CXX_COMPILER=g++ \
            -DCMAKE_CXX_FLAGS="-O2 -static-libgcc -static-libstdc++" \
            -DCMAKE_C_COMPILER=gcc \
            -DLLVM_ENABLE_PROJECTS=mlir \
            -DLLVM_ENABLE_TERMINFO=OFF \
            -DLLVM_ENABLE_ZLIB=OFF \
            -DLLVM_ENABLE_ZSTD=OFF \
            -DLLVM_TARGETS_TO_BUILD=X86 \
            -S${LLVM_PROJECT_MAIN_SRC_DIR}/llvm \
            -B${LLVM_PROJECT_HOST_MAIN_BINARY_DIR}
          
          cmake --build ${LLVM_PROJECT_HOST_MAIN_BINARY_DIR} \
            --target llvm-tblgen mlir-tblgen mlir-linalg-ods-yaml-gen mlir-pdll

      - name: Choose compiler and set env vars
        run: |
          if [ x"${{ matrix.os }}" == x"macos-latest" ]; then
            echo "CXX_COMPILER=clang++" | tee -a $GITHUB_ENV
            echo "C_COMPILER=clang" | tee -a $GITHUB_ENV
            echo "LLVM_DEFAULT_TARGET_TRIPLE=arm64-apple-darwin21.6.0" | tee -a $GITHUB_ENV
            echo "LLVM_HOST_TRIPLE=arm64-apple-darwin21.6.0" | tee -a $GITHUB_ENV
            echo "ARCH=AArch64" | tee -a $GITHUB_ENV
          elif [ x"${{ matrix.os }}" == x"ubuntu-latest" ] && [ x"${{ matrix.arch }}" == x"AArch64" ]; then
            echo "CXX_COMPILER=aarch64-linux-gnu-g++" | tee -a $GITHUB_ENV
            echo "C_COMPILER=aarch64-linux-gnu-gcc" | tee -a $GITHUB_ENV
            echo "LLVM_DEFAULT_TARGET_TRIPLE=aarch64-linux-gnu" | tee -a $GITHUB_ENV
            echo "LLVM_HOST_TRIPLE=aarch64-linux-gnu" | tee -a $GITHUB_ENV
            echo "ARCH=AArch64" | tee -a $GITHUB_ENV
          else
            echo "CXX_COMPILER=g++" | tee -a $GITHUB_ENV
            echo "C_COMPILER=gcc" | tee -a $GITHUB_ENV
            echo "LLVM_DEFAULT_TARGET_TRIPLE=x86_64-unknown-linux-gnu" | tee -a $GITHUB_ENV
            echo "LLVM_HOST_TRIPLE=x86_64-unknown-linux-gnu" | tee -a $GITHUB_ENV
            echo "ARCH=X86" | tee -a $GITHUB_ENV
          fi

      - name: Configure CMake
        run: |
          CMAKE_CONFIGS="\
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_CXX_COMPILER=$CXX_COMPILER \
            -DCMAKE_C_COMPILER=$C_COMPILER \
            -DCMAKE_INSTALL_PREFIX=$LLVM_PROJECT_INSTALL_DIR \
            -DLLVM_CCACHE_BUILD=ON \
            -DLLVM_DEFAULT_TARGET_TRIPLE=$LLVM_DEFAULT_TARGET_TRIPLE \
            -DLLVM_ENABLE_ASSERTIONS=ON \
            -DLLVM_ENABLE_PROJECTS=mlir \
            -DLLVM_ENABLE_ZSTD=OFF \
            -DLLVM_HOST_TRIPLE=$LLVM_HOST_TRIPLE \
            -DLLVM_INCLUDE_UTILS=ON \
            -DLLVM_INSTALL_UTILS=ON \
            -DLLVM_TARGETS_TO_BUILD=$ARCH \
            -DLLVM_TARGET_ARCH=$ARCH \
            -DLLVM_USE_HOST_TOOLS=ON \
            -DMLIR_BUILD_MLIR_C_DYLIB=1 \
            -DMLIR_ENABLE_BINDINGS_PYTHON=ON \
            -DMLIR_ENABLE_EXECUTION_ENGINE=ON \
            -DPython3_EXECUTABLE=$(which python)"
          
          if [ x"${{ matrix.os }}" == x"macos-latest" ]; then
            CMAKE_CONFIGS="${CMAKE_CONFIGS} \
              -DCMAKE_OSX_ARCHITECTURES=arm64 \
              -DMACOSX_DEPLOYMENT_TARGET=12.0"
          elif [ x"${{ matrix.os }}" == x"ubuntu-latest" ] && [ x"${{ matrix.arch }}" == x"AArch64" ]; then
            CMAKE_CONFIGS="${CMAKE_CONFIGS} \
              -DLLVM_TABLEGEN=$LLVM_PROJECT_HOST_MAIN_BINARY_DIR/bin/llvm-tblgen \
              -DMLIR_LINALG_ODS_YAML_GEN=$LLVM_PROJECT_HOST_MAIN_BINARY_DIR/bin/mlir-linalg-ods-yaml-gen \
              -DMLIR_LINALG_ODS_YAML_GEN_EXE=$LLVM_PROJECT_HOST_MAIN_BINARY_DIR/bin/mlir-linalg-ods-yaml-gen \
              -DMLIR_PDLL_TABLEGEN=$LLVM_PROJECT_HOST_MAIN_BINARY_DIR/bin/mlir-pdll \
              -DMLIR_TABLEGEN=$LLVM_PROJECT_HOST_MAIN_BINARY_DIR/bin/mlir-tblgen"
          fi
          
          echo $CMAKE_CONFIGS
          if [ x"${{ matrix.os }}" == x"ubuntu-latest" ] && [ x"${{ matrix.arch }}" == x"AArch64" ]; then
            cmake -G Ninja \
                $CMAKE_CONFIGS \
                -DCMAKE_CXX_FLAGS="-O2 -static-libgcc -static-libstdc++" \
                -S${LLVM_PROJECT_MAIN_SRC_DIR}/llvm \
                -B${LLVM_PROJECT_MAIN_BINARY_DIR}
          else
            cmake -G Ninja \
                  $CMAKE_CONFIGS \
                  -S${LLVM_PROJECT_MAIN_SRC_DIR}/llvm \
                  -B${LLVM_PROJECT_MAIN_BINARY_DIR}
          fi

      - name: Build distro
        run: |
          cmake --build ${LLVM_PROJECT_MAIN_BINARY_DIR} --target install
          ccache -s

      - name: Make tarballs
        run: |
          OUTPUT="llvm-project-${LLVM_PROJECT_COMMIT}-${{ matrix.os }}-${{ matrix.arch }}"
          XZ_OPT='-T0 -9' tar -cJf "${OUTPUT}.tar.xz" llvm_project_install

          mkdir -p ${{ github.sha }}/
          mv *.tar.xz ${{ github.sha }}/

      - name: Build MLIR Python bindings wheel
        run: |
          python -m pip install wheel
          if [ x"${{ matrix.os }}" == x"macos-latest" ]; then
            PLATFORM_NAME="macosx_12_0"
            ARCH=arm64
            R=R
          elif [ x"${{ matrix.os }}" == x"ubuntu-latest" ] && [ x"${{ matrix.arch }}" == x"AArch64" ]; then
            PLATFORM_NAME="manylinux2014"
            ARCH=aarch64
            R=r
          else
            PLATFORM_NAME="manylinux2014"
            ARCH=x86_64
            R=r
          fi
          
          cp -L -$R llvm_project_install/python_packages/mlir_core/mlir .
          cp -L -$R llvm_project_install/lib/libmlir* mlir/_mlir_libs/
          
          python setup.py bdist_wheel --plat-name "${PLATFORM_NAME}_${ARCH}" --dist-dir ${{ github.sha }}

      - name: Upload an artifact
        uses: actions/upload-artifact@v3
        with:
          if-no-files-found: error
          name: build_artifact
          path: ${{ github.sha }}

  upload-tarballs:

    runs-on: ubuntu-latest

    needs: build

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: build_artifact
          path: ${{ github.sha }}

      - name: Set up a release page
        id: setup_release
        run: |
          LLVM_PROJECT_COMMIT="${{ needs.build.outputs.LLVM_PROJECT_COMMIT }}"
          echo "Created at $(date) build of [https://github.com/llvm/llvm-project/commit/${LLVM_PROJECT_COMMIT}](https://github.com/llvm/llvm-project/commit/${LLVM_PROJECT_COMMIT})" > body.md
          echo "tag_name=llvm-project-${LLVM_PROJECT_COMMIT}" | tee -a $GITHUB_OUTPUT
          echo "release_title=llvm-project-${LLVM_PROJECT_COMMIT}" | tee -a $GITHUB_OUTPUT

      - name: Release current commit
        uses: ncipollo/release-action@v1
        with:
          artifacts: "${{ github.sha }}/*.tar.xz,${{ github.sha }}/*.whl,${{ github.sha }}/*.exe"
          bodyFile: body.md
          token: "${{ secrets.GITHUB_TOKEN }}"
          tag: "${{ steps.setup_release.outputs.tag_name }}"
          name: "${{ steps.setup_release.outputs.release_title }}"
          removeArtifacts: false
          makeLatest: true
          allowUpdates: true
          replacesArtifacts: true
